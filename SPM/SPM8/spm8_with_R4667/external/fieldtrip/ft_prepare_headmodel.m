function vol = ft_prepare_headmodel(cfg, mri)

% FT_PREPARE_HEADMODEL constructs a volume conduction model from
% the geometry of the head. The volume conduction model specifies how
% currents that are generated by sources in the brain, e.g. dipoles,
% are propagated through the tissue and how these result in externally
% measureable EEG potentials or MEG fields.
%
% This function takes care of all the preparatory steps in the
% construction of the volume conduction model and sets it up so that
% subsequent computations are efficient and fast.
%
% The input to this function is a geometrical description of the
% shape of the head. If you pass a segmented anatomical MRI as input,
% the geometry will be based on that.
%
% Use as
%   vol = ft_prepare_headmodel(cfg)
% or
%   vol = ft_prepare_headmodel(cfg, mri)
% with a segmented anatomical MRI as second input (see FT_VOLUMESEGMENT).
%
% The configuration structure should contain
%   cfg.method = string that specifies the forward solution, see below
%
% FieldTrip implementes a variety of forward solutions, some of
% them using external toolboxes or executables. Each of the forward solutions requires a set of configuration options which are listed below.
%
% For EEG the following methods are available
%   singlesphere
%   bem_asa
%   bem_cp
%   bem_dipoli
%   bem_openmeeg
%   concentricspheres
%   halfspace
%   infinite
%
% For MEG the following methods are available
%   singlesphere
%   localspheres
%   singleshell
%   infinite

% Copyright (C) 2011, Cristiano Micheli
%
% $Log$

% set the defaults

if ~isfield(cfg, 'hdmfile'),         cfg.hdmfile    = [];  end
if ~isfield(cfg, 'conductivity'),    cfg.conductivity  = [];  end
if ~isfield(cfg, 'geom'),            cfg.geom  = [];  end
if ~isfield(cfg, 'isolatedsource'),  cfg.isolatedsource = [];  end

if ~isfield(cfg, 'fitind'),          cfg.fitind = 1;  end      % for the concentric spheres function
if ~isfield(cfg, 'submethod'),       cfg.submethod = [];  end  % for the halfspace function
if ~isfield(cfg, 'point'),           cfg.point = [];  end      % for the halfspace function
if ~isfield(cfg, 'grad'),            cfg.grad = [];  end       % for the localspheres function
if ~isfield(cfg, 'feedback'),        cfg.feedback = [];  end   % for the localspheres function
if ~isfield(cfg, 'radius'),          cfg.radius = [];  end     % for the localspheres function
if ~isfield(cfg, 'maxradius'),       cfg.maxradius = [];  end  % for the localspheres function
if ~isfield(cfg, 'baseline'),        cfg.baseline = [];  end   % for the localspheres function

if isempty(cfg.method)
  error('The method to create the head model should be specified')
end

if nargin > 1
  basedonmri = true;
  basedonheadshape = false;
else
  basedonmri = false;
  basedonheadshape = true;
end

if isempty(cfg.geom) & isempty(cfg.hdmfile) & ~basedonmri
  error('Either cfg.geom or cfg.hdmfile should be specified')
end


if basedonheadshape
  switch cfg.method
    case 'bem_asa'
      if ~isempty(cfg.hdmfile)
          vol = ft_headmodel_bem_asa(cfg.hdmfile);
      else
        error('Please use a valid head model file')
      end
      
    case 'bem_cp'
      if ~isempty(cfg.hdmfile)
        vol = ft_headmodel_bem_cp([],'hdmfile',cfg.hdmfile,'conductivity',cfg.conductivity);
      else
        vol = ft_headmodel_bem_cp(cfg.geom,'conductivity',cfg.conductivity);
      end
      
    case 'bem_dipoli'
      if ~isempty(cfg.hdmfile)
        vol = ft_headmodel_bem_dipoli([],'hdmfile',cfg.hdmfile,'conductivity',cfg.conductivity,'isolatedsource',cfg.isolatedsource);
      else
        vol = ft_headmodel_bem_dipoli(cfg.geom,'conductivity',cfg.conductivity,'isolatedsource',cfg.isolatedsource);
      end
      
    case 'bem_openmeeg'
      if ~isempty(cfg.hdmfile)
        vol = ft_headmodel_bem_dipoli([],'hdmfile',cfg.hdmfile,'conductivity',cfg.conductivity,'isolatedsource',cfg.isolatedsource);
      else
        vol = ft_headmodel_bem_dipoli(cfg.geom,'conductivity',cfg.conductivity,'isolatedsource',cfg.isolatedsource);
      end
      
    case 'concentricspheres'
      vol = ft_headmodel_concentricspheres(cfg.geom,'conductivity',cfg.conductivity,'fitind',cfg.fitind);
      
    case 'halfspace'
      vol = ft_headmodel_halfspace(cfg.geom, cfg.point, 'conductivity',cfg.conductivity,'submethod',cfg.submethod);
      
    case 'infinite'
      vol = ft_headmodel_infinite;
      
    case 'localspheres'
      vol = ft_headmodel_localspheres(cfg.geom,cfg.grad,'feedback',cfg.feedback,'radius',cfg.radius,'maxradius',cfg.maxradius,'baseline',cfg.baseline);
      
    case 'singleshell'
      vol = ft_headmodel_singleshell(cfg.geom);
      
    case 'singlesphere'
      if isfield(cfg.geom,'pnt')
        pnt = cfg.geom.pnt;
      end
      vol = ft_headmodel_singlesphere(pnt,'headshape',cfg.hdmfile,'conductivity',cfg.conductivity);
      
    case 'simbio'
      vol = ft_headmodel_fem_simbio();
      
    case 'fns'
      vol = ft_headmodel_fem_fns();
      
    otherwise
      error('unsupported method "%s"', cfg.method);
  end
end

if basedonmri
  % geometry is based on mri
  % FIXME: add code here
  error('not yet implemented')
end

