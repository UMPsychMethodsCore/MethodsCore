function [b,v,t] = sphere_iter(niter,type)

t = ((1+sqrt(5))/2)/sqrt(1+((1+sqrt(5))/2)^2);
u = 1/sqrt(1+((1+sqrt(5))/2)^2);
ico_vertices = [t,u,0;...
                -t,u,0;...
                -t,-u,0;...
                t,-u,0;...
                u,0,t;...
                u,0,-t;...
                -u,0,-t;...
                -u,0,t;...
                0,t,u;...
                0,-t,u;...
                0,-t,-u;...
                0,t,-u];
            
ico_triangles = [5,9,8;...
                 5,8,10;...
                 6,7,12;...
                 6,11,7;...
                 1,5,4;...
                 1,4,6;...
                 3,8,2;...
                 3,2,7;...
                 9,1,12;...
                 9,12,2;...
                 10,11,4;...
                 10,3,11;...
                 9,5,1;...
                 12,1,6;...
                 5,10,4;...
                 6,4,11;...
                 8,9,2;...
                 7,2,12;...
                 8,3,10;...
                 7,11,3];                 

sqrt3 = sqrt(3);
tet_vertices = [sqrt3,sqrt3,sqrt3;...
                -sqrt3,-sqrt3,sqrt3;...
                -sqrt3,sqrt3,-sqrt3;...
                sqrt3,-sqrt3,-sqrt3];
            
tet_triangles = [1,2,3;...
                 1,4,2;...
                 3,2,4;...
                 4,1,3];

oct_vertices = [1,0,0;...  
                -1,0,0;... 
                0,1,0;...  
                0,-1,0;... 
                0,0,1;...  
                0,0,-1];   
     
oct_triangles = [1,5,3;...
                 3,5,2;...
                 2,5,4;...
                 4,5,1;...
                 1,3,6;...
                 3,2,6;...
                 2,4,6;...
                 4,1,6];
             
if(type < 2)
    vertices = oct_vertices;
    triangles = oct_triangles;
elseif(type < 3)
    vertices = tet_vertices;
    triangles = tet_triangles;
else
    vertices = ico_vertices;
    triangles = ico_triangles;
end
         
for ii=1:niter
    sub_triangles = zeros(size(triangles));
    for jj=1:length(triangles)
        for kk=1:3
            if(sub_triangles(jj,kk) == 0)
                v1 = triangles(jj,kk);
                v2 = triangles(jj,mod(kk,3)+1);
                v = (vertices(v1,:)+vertices(v2,:))/2;
                v = v/sqrt(sum(v.^2));
                vertices = [vertices;v];
                sub_triangles(jj,kk) = length(vertices);
                vsort = sort([v1,v2]);
                for ll=1:length(triangles)
                    for mm=1:3
                        if(sort([triangles(ll,mm),triangles(ll,mod(mm,3)+1)]) == vsort)
                            sub_triangles(ll,mm) = length(vertices);
                        end
                    end
                end
            end
        end
    end
    triangles_temp = zeros(length(triangles)*4,3);
    for jj=1:length(triangles)
        triangles_temp((jj-1)*4+1,:) = [triangles(jj,1) sub_triangles(jj,1) sub_triangles(jj,3)];
        triangles_temp((jj-1)*4+2,:) = [sub_triangles(jj,1) sub_triangles(jj,2) sub_triangles(jj,3)];
        triangles_temp((jj-1)*4+3,:) = [sub_triangles(jj,1) triangles(jj,2) sub_triangles(jj,2)];
        triangles_temp((jj-1)*4+4,:) = [sub_triangles(jj,3) sub_triangles(jj,2) triangles(jj,3)];
    end
    triangles = triangles_temp;
end
v = vertices;
b = sparse([triangles(:,1);triangles(:,2);triangles(:,3)],[triangles(:,2);triangles(:,3);triangles(:,1)],1);