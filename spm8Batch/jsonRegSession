#!/bin/bash

# # # # # # # # # # # # # # # # # # 
#
# Command to register an fMRI session
# to the dB via JSON creation
#
#                         Robert C. Welsh
#                         Copyright 2016-
#
# jsonRegSession
#
# This command always runs in the foreground
# as it won't write a script file.
#
# # # # # # # # # # # # # # # # # #

#
# Main jsonRegSession
#

VERSION="1.0"
VERSIONDATE="2016-07-20"

# Find out where the current command lives and execute some common code.

theFullCommand="$0 $*"
execDIR=`pwd`

# Find out where the current command lives and execute some common code.

theCommand=`which $0`
thisDir=`dirname $theCommand`

thisCommand=`echo $theCommand | awk -F/ '{print $NF}'`

echo "thisCommand : ${thisCommand}"
allowedOptions="MUY"

# This piece of code all of the spm8Batch scripts will use
. ${thisDir}/auxiliary/commonCode_AllScriptsStart

# Validate that we have FSL installed.
. ${thisDir}/auxiliary/commonCode_FSL_01

# This is common in-line code for all spm8Batch script to make sure arguments were passed
. ${thisDir}/auxiliary/commonCode_checkIfArgsPassed

#
# The actual function.
#

. ${thisDir}/auxiliary/parse_arguments

# Check to see if the .dBConfiguration file is present, however if the DBTarget (not "default_dB")
# variable has been set, then don't overwrite.

if [ "${DBTarget}" == "default_dB" ]
then
    # get the full path name of the directory where we expect the dbConfiguration file.
    # which should be living in the directory just above "Subjects/"
    # however, maybe we should also just the directory above that as well.
    # this would allow for the directory structure of
    #
    #    [Experiment]/
    #          Subjects/
    #
    # or
    #
    #    [Experiment]/
    #      ImagingData/
    #        Subjects/
    #
    # However, can't necessarily key off directory names as those are allowed to be
    # whatever the user specifies (i.e. Subjects/ can be called something else by them)
    #
    curDIR=`pwd`
    cd ${SUBJDIR}
    dBConfigFile=
    for searchDIR in ../ ../../
    do
	cd ${curDIR}/${SUBJDIR}
	cd ${searchDIR}
	dBConfigFileDIR=`pwd`
	if [ -e "${dBConfigFileDIR}/.dBConfiguration" ]
	then
	    dBConfigFile=${dBConfigFileDIR}/.dBConfiguration
	fi
    done
    if [ -z "${dBConfigFile}" ]
	then
	echo
	echo ${dBConfigFile} does not exist, skipping dB usage.
	echo
    else
	source ${dBConfigFile} 2> /dev/null
	if [ $? != 0 ]
	then
	    . ${thisDir}/auxiliary/noDBConfigurationErrorMsg
	    . ${thisDir}/auxiliary/exit_w_removal
	fi
    fi
    cd ${curDIR}
fi

#

. ${thisDir}/auxiliary/superDebugStatus

#
# Ok - let's start displaying things back to the terminal
#

. ${thisDir}/auxiliary/shellScriptInfo

#
# Prepare to write the script.
#

# Makes sure they speficied some subjects.
. ${thisDir}/auxiliary/checkInputForSubjects

# Write out debug status
. ${thisDir}/auxiliary/debugStatus

# Print out the list of subjects that we operate upon.
. ${thisDir}/auxiliary/printSubjectsList

# Make two loops, one to check that images p2 and p3 exist for all subjects, if they don't we will
# bugger out.

BAD=0

# Set the erosion options

for WORK in 0 
do  
    for (( is=1 ; is<=$nSubjects ; is++ ))
    do
	cd ${curDIR}
	cd ${SUBJDIR}
	DATE=`date`
	JSONDATE=`date +%Y_%m_%d_%H_%M`
	echo "${DATE} : Building JSON registration for ${subjects[$is]}"
	JSONFILE=${curDIR}/${SUBDIR}/${subjects[$is]}/json_register_${subjects[$is]}_${JSONDATE}
	# call the json builder for subject registration.
	# this is an echo which needs "jsonRegBuilder" to be written.
	echo "jsonRegBuilder ${subjects[$is]} ${JSONFILE} ${DBTarget} ${USEREMAIL}"
	JSONSuccess=$?
	if [ ${JSONSuccess} == 0 ]
	then
	    # call the json transmitter to send the JSON file to the dB interface"
	    # this is an echo, which needs "jsonTransmit" to be written.
	    echo "jsonTransmit ${subjects[$is]} ${JSONFILE} ${DBTarget} ${USEREMAIL}"
	    JSONSucess=$?
	    if [ ${JSONSuccess} != 0 ]
	    then
		echo "Failed to transmite JSON ${JSONFILE} to ${DBTarget}, error ${JSONSuccess}"
		echo
		exit 1
	    fi
	else
	    echo "Failed to create JSON ${JSONFILE}, error ${JSONSuccess}"
	    echo
	    exit 1
	fi
    done
done

echo
echo All done
echo

#
# All done.
# 
